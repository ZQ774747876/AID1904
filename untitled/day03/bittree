"""
bittree.py 二叉树的实现
思路分析：
1.使用链式存储
        节点类设计上有两个属性变量引用左孩子和右孩子
2.操作类，完成二叉树的遍历
"""
#二叉树节点
from day02.squeue import *
class TreeNode:
    def __init__(self,data=None,left=None,right=None):
        self.data=data
        self.left=left
        self.right=right
class Bitree:
    def __init__(self,root=None):
        self.root=root
    #先序遍历
    def preOrder(self,node):
      if node is None:
          return
      print(node.data,end=' ')
      self.preOrder(node.left)
      self.preOrder(node.right)
    #中序遍历
    def inOrder(self, node):
        if node is None:
            return
        self.preOrder(node.left)
        print(node.data, end=' ')
        self.preOrder(node.right)
    def levelOrder(self,node):
        sq=SQueue()
        sq.enqueue(node)
        while not sq.is_empty():
           node=sq.dequeue()
           print(node.data,end=' ')
           if node.left:
               sq.enqueue(node.left)
           if node.right:
                sq.enqueue(node.right)


if __name__ =="__main__":
 #后序遍历 BFGDIHECA
     b=TreeNode('B')
     f=TreeNode('F')
     g=TreeNode('G')
     d=TreeNode('D',f,g)
     i=TreeNode('I')
     h=TreeNode('H')
     e = TreeNode('E',i,h)
     c = TreeNode('C',d,e)
     a = TreeNode('A',b,c)
#初始化

bt=Bitree(a)
bt.preOrder(bt.root)
print()
bt.inOrder(bt.root)
print()
bt.levelOrder(bt.root)
